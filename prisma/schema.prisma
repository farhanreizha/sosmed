// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  comments      Comment[]
  likes         Like[]
  saves         Save[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum types {
  Thread
  Comment
  Showcase
}

enum typeNotif {
  Comment
  Like
}

model Thread {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime

  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  saves    Save[]
}

model Comment {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  type      types

  userId    String
  commentBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String
  thread    Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  parentId String
  parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Comment[] @relation("ParentChild")
  likes    Like[]
}

model Like {
  userId    String
  commentId String
  threadId  String
  type      types

  likedBy User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  thread  Thread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@id([userId, threadId, commentId])
}

model Save {
  userId   String
  threadId String
  type     types

  saveBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@id([userId, threadId])
}
